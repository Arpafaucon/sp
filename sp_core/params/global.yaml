admiral:
  # wall_radius, in m
  wall_radius: .3
  # simulated recoil inital temperature. The hotter it is, the more likely will unpromising directions be explored during target position optimisation
  initial_temp: 100
  # number of steps to find the optimum.
  # if bigger, algorithm will better target optimal locations
  # however the locations will be farther from the drones, so that implies an additional burden on sp_captain node. Therefore, if captain fails too often, reduce this value
  n_iterations: 100
  # sight radius, in m
  drone_sight_radius: .3
  # optimisation rate, in Hz
  rate: .07
  # score increment per cycle
  score_step_increment: 15

captain:
  # update check rate, in Hz
  rate: .4
  # max number of iterations to find trajectory tree
  iterations: 200
  # expand distance, in meters
  # if map is convex enough, you can increase that distance to allow faster waypoint calculation. However, you risk that some trajectories cross  wall corners
  expand_distance: 1.5
  # enabling the debug animation window will show internal RRT process.
  # this will slow down **A LOT** the process
  debug_animation: False

mate:
  # SETUP PARAMETERS
  # set to false to use real robots
  # simulation_mode: true

  # number of drones max
  # should be set to a valid value by the launch file spawning the drones (see sp_mate simX_spawn.launch) [put here for completeness]
  num_drones_total: 5
  
  # Hardware addresses of real drones
  # there are typically of the form : "0xE7E7E7xx"
  # there must be at least 'num_drones_total' of those addresses
  # drones_hw_addresses : [
  #   "0xE7E7E7E1",
  #   "0xE7E7E7E2",
  #   "0xE7E7E7E3",
  #   "0xE7E7E7E4",
  # ]
  # OPERATIVE PARAMETERS
  # control loop rate, Hz
  control_rate: 2
  
  # flight altitude, m
  altitude : 1
  # tolerance around landing and takeoff altitude objectives, 
  # x means:
  #  - takeoffs are finished once z > (1-x)*altitude
  #  - landings are finished once z <     x*altitude
  transition_threshold: .1
  # duration goal for takeoffs and landing, s
  # the longer it is set, the more stable the drones will be
  transition_duration: 5
  # tolerance radius around goals, m
  goal_radius : .1
  # collision detection radius, m
  # the collision distance is the distance between a drone wayline segment and another (higher priority) drone position 
  # if that distance is less than the threshold set below, the drone mission is paused, and the lesser priority drone stays in place

  collision_distance: .1

  # limit max to the distance to the target given to /cfX/go_to, in m
  # if too large, drones will do too quick trajectories when given distant orders, and will probably collide
  goto_distance_cap: 1
  # duration deadline given to /cfX/go_to, in s
  goto_duration: 3

  # DRONE MANAGEMENT
  allocation_rate: 1


lookout:
  # position update rate, Hz
  rate: 5

